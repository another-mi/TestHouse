@page "/projects"
@inject TestHouse.Web.Blazor.Services.ProjectService _projectService;
@using Microsoft.AspNetCore.Blazor.Services
@using TestHouse.DTOs.DTOs
@using TestHouse.DTOs.Models

<div class="content">
    <h1>Projects list</h1>

    <p>This component demonstrates fetching data from the server.</p>
    <a class="button is-primary" onclick="@ShowModal">Добавить проект</a>
</div>

<div class="modal @(isModalActive ? "is-active" : "" )">
    <div class="modal-background" onclick="@CloseModal"></div>
    <div class="modal-content">
        <div class="card">
            <header class="card-header">
                <p class="card-header-title">
                    Новый проект
                </p>
                <a href="#" class="card-header-icon" aria-label="more options">
                    <span class="icon">
                        <i class="fas fa-angle-down" aria-hidden="true"></i>
                    </span>
                </a>
            </header>
            <div class="card-content">
                <EditForm Model="@projectForm" OnValidSubmit="@SubmitProjectForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="field">
                        <label class="label">Название</label>
                        <div class="control">
                            <InputText id="name" class="input" bind-Value="@projectForm.Name" />
                        </div>
                        <p class="help">Введите уникальное название</p>
                    </div>
                    <div class="field">
                        <label class="label">Описаник</label>
                        <div class="control">
                            <InputText id="description" class="input" bind-Value="@projectForm.Description" />
                        </div>                        
                    </div>
                    <button type="submit" class="button is-primary">Submit</button>
                </EditForm>
            </div>
        </div>
    </div>
    <button class="modal-close is-large" aria-label="close" onclick="@CloseModal"></button>
</div>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="columns">

        @foreach (var project in projects)
        {
            <div class="column is-3">

                <div class="card">
                    <header class="card-header">
                        <p class="card-header-title">
                            Component
                        </p>
                        <a href="#" class="card-header-icon" aria-label="more options">
                            <span class="icon">
                                <i class="fas fa-angle-down" aria-hidden="true"></i>
                            </span>
                        </a>
                    </header>
                    <div class="card-content">
                        <div class="content">
                            <p>
                                <strong>@project.Name</strong> <small>@project.Id</small> <small></small>
                                <br>
                                @project.Description
                            </p>
                            <br>
                            <time datetime="2016-1-1">11:09 PM - 1 Jan 2016</time>
                        </div>
                    </div>
                    <footer class="card-footer">
                        <a href="#" class="card-footer-item">Save</a>
                        <a href="#" class="card-footer-item">Edit</a>
                        <a href="#" class="card-footer-item">Delete</a>
                    </footer>
                </div>
            </div>
        }
    </div>
}

@functions {
        List<ProjectDto> projects;
        bool isModalActive;
        ProjectModel projectForm = new ProjectModel();

    protected override async Task OnInitAsync()
    {
        try
        {
            projects = await _projectService.GetProjectsAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }

    private void ShowModal() => isModalActive = true;
    private void CloseModal() => isModalActive = false;
    private async Task SubmitProjectForm()
    {

        var newProject = await _projectService.AddProject(projectForm);
        projects.Add(newProject);
        projectForm = new ProjectModel();
        CloseModal();
    }



}
